<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <title>Running stats</title>
    <link href="style.css" type="text/css" rel="stylesheet" />
    <link href="jquery-ui.min.css" type="text/css" rel="stylesheet" />
    <link href="jquery-ui.structure.min.css" type="text/css" rel="stylesheet" />
    <link href="jquery-ui.theme.min.css" type="text/css" rel="stylesheet" />
    <script src="jquery-3.2.1.js"></script>
    <script src="jquery-ui.min.js"></script>
    <script src="js/jquery.tablesorter.js"></script>
    <script src="js/jquery.tablesorter.widgets.js"></script>
    <script src="js/parsers/parser-ipv6.js"></script>
    <script src="js/jquery.metadata.js"></script>
    <script>
        function getOption(val, current) {
            return '<option value="' + val + '"' + (current == val ? ' selected>' : '>') + val + '</option>';
        }

        function colorDiff(diff) {
            c = diff.charAt(0);
            if (c == '+') {
                return '<span class="red">' + diff + '</span>';
            }
            if (c == '-') {
                return '<span class="green">' + diff + '</span>';
            }
            return diff;
        }

        function valTime(time) {
            res = time.split(":");
            if (res.length == 2) {
                return 60 * parseInt(res[0]) + parseInt(res[1]);
            }
            return 3600 * parseInt(res[0]) + 60 * parseInt(res[1]) + parseInt(res[2]);
        }

        function comp(t1, t2, tt) {
            if (t1 < t2) {
                return '<span class="green">' + tt + '</span>';
            }
            if (t1 == t2) {
                return tt;
            }
            return '<span class="red">' + tt + '</span>';
        }

        function comp2(t1, t2) {
            return comp(parseFloat(t2.replace(',', '.')), parseFloat(t1.replace(',', '.')), t1);
        }

        function colorDiff1(tt1, tt2) {
            t1 = valTime(tt1);
            t2 = valTime(tt2);
            return comp(t1, t2, tt1);
        }

        function formatEle(gain, loss) {
            res = '-';
            if (gain > 0 && loss > 0) {
                res = '<span class="green">+' + gain + '</span>/<span class="red">-' + loss + '</span>';
            } else if (gain > 0) {
                res = '<span class="green">+' + gain + '</span>';
            } else if (loss > 0) {
                res = '<span class="red">-' + loss + '</span>';
            }
            return res;
        }

        function formatEleDiff(diff) {
            if (diff == 0) {
                return '0';
            }
            if (diff > 0) {
                return '<span class="green">+' + diff + '</span>';
            }
            return '<span class="red">' + diff + '</span>';
        }

        function round(point) {
            if (Math.abs(point - Math.round(point)) < 1e-3) {
                return Math.round(point);
            }
            return point;
        }

        function initDialogs() {
			$('#rsOk').dialog({
                autoOpen: false,
                modal: true,
                show: "blind",
                hide: "blind",
                buttons: {
                    "OK": function() {
                        $(this).dialog("close");
                    }
                },
                width: 300,
                height: 200
            });
			$('#login').dialog({
                autoOpen: false,
                modal: true,
                show: "blind",
                hide: "blind",
                buttons: {
					"Login": function() {
                        $.ajax({
                            url: 'login',
                            headers: {
                                'Content-Type': 'application/json',
                                'User': $('#loginUser').val(),
                                'Password': $('#loginPassword').val()
                            },
                            method: 'POST',
                            dataType: 'json',
                            statusCode: {
                                200: function(xhr) {
                                    alert("Logged in!");
									$("#loginButton").button("option", "disabled", true);
                                },
                                401: function(xhr) {
                                    alert('DGD BOKLIK!');
                                },
                                500: function(xhr) {
                                    alert('Internal server error!');
                                }
                            }
						});
						$(this).dialog("close");
					},
                    "Cancel": function() {
                        $(this).dialog("close");
                    }
                },
                width: 450,
                height: 250
            });
            $("#editable").dialog({
                autoOpen: false,
                modal: true,
                show: "blind",
                hide: "blind",
                buttons: {
                    "Save": function() {
                        $.ajax({
                            url: 'editActivity',
                            headers: {
                                'Content-Type': 'application/json',
                                'File': $("#editable").attr('genby'),
                                'Name': encodeURIComponent($('#chooseName').val()),
                                'Type': $('#chooseType').val(),
                                'Password': $('#pass').val()
                            },
                            method: 'POST',
                            dataType: 'json',
                            statusCode: {
                                200: function(xhr) {
                                    $('#' + $("#editable").attr('refname')).text($('#chooseName').val());
                                    $('#' + $("#editable").attr('reftype')).text($('#chooseType').val());
                                },
                                401: function(xhr) {
                                    alert('DGD BOKLIK!');
                                },
                                400: function(xhr) {
                                    alert('Empty name!');
                                }
                            }
                        });
                        $(this).dialog("close");
                    }
                },
                width: Math.min($(window).width() * 0.4, 400),
                height: Math.min($(window).height() * 0.4, 300),
                create: function(event) {
                    $(event.target).parent().css({
                        'position': 'fixed',
                        "left": 70,
                        "top": 140
                    });
                }
            });
			$("#removable").dialog({
                autoOpen: false,
                modal: true,
                show: "blind",
                hide: "blind",
                buttons: {
                    "Remove": function() {
                        $.ajax({
                            url: 'deleteActivity',
                            headers: {
                                'Content-Type': 'application/json',
                                'File': $("#removable").attr('genby'),
                                'Password': $('#passRem').val()
                            },
                            method: 'POST',
                            dataType: 'json',
                            statusCode: {
                                200: function(xhr) {
                                    getBest();
									fetch();
                                },
                                401: function(xhr) {
                                    alert('DGD BOKLIK!');
                                },
                                400: function(xhr) {
                                    alert('Empty name!');
                                }
                            }
                        });
                        $(this).dialog("close");
                    }
                },
                width: Math.min($(window).width() * 0.4, 400),
                height: Math.min($(window).height() * 0.4, 300),
                create: function(event) {
                    $(event.target).parent().css({
                        'position': 'fixed',
                        "left": 70,
                        "top": 140
                    });
                }
            });
            $('#comparable').dialog({
                autoOpen: false,
                modal: true,
                show: "blind",
                hide: "blind",
                buttons: {
                    "Compare": function() {
                        $.ajax({
                            url: 'compare',
                            method: 'POST',
                            dataType: 'json',
                            headers: {
                                'Content-Type': 'application/json',
                                'file1': $('#comparable').attr('file1'),
                                'file2': $('#selectComp').find(':selected').attr('genby')
                            },
                            statusCode: {
                                200: function(data) {
                                    index = $("#selectComp option:selected").index() + 1;
                                    general = data['general'];
                                    times = data['times'];
                                    tt = '';
                                    $.each(times, function(i, sp) {
                                        tt += '<tr><td><strong>' + round(sp['point']) + '</strong></td><td>' + colorDiff1(sp['time1'], sp['time2']) + '</td><td>' + colorDiff1(sp['time2'], sp['time1']) + '</td><td>' + colorDiff(sp['currentDiff']) + '</td><td>' + colorDiff(sp['totalDiff']) + '</td></tr>';
                                    });
                                    $('#selectComp :nth-child(' + index + ')').prop('selected', true);
                                    $('#compareResults').html('<h2>General</h2><table class="highlightOnly"><thead><th></th><th>' + decodeURIComponent(general['name1']) + ' ' + general['date1'] + '</th><th>' + decodeURIComponent(general['name2']) + ' ' + general['date2'] + '</th></thead><tbody>' +
                                        '<tr><td>Date</td><td>' + general['date1'] + '</td><td>' + general['date2'] + '</td></tr><tr><td>Distance(km)</td><td>' + comp2(general['dist1'], general['dist2']) + '</td><td>' + comp2(general['dist2'], general['dist1']) + '</td></tr>' +
                                        '<tr><td>Time</td><td>' + colorDiff1(general['time1'], general['time2']) + '</td><td>' + colorDiff1(general['time2'], general['time1']) + '</td></tr>' +
                                        '<tr><td>Speed(km/h)</td><td>' + comp2(general['speed1'], general['speed2']) + '</td><td>' + comp2(general['speed2'], general['speed1']) + '</td></tr><tr><td>Elev gain(m)</td><td>' + general['elePos1'] + '</td><td>' + general['elePos2'] + '</td></tr>' +
                                        '<tr><td>Elev loss(m)</td><td>' + general['eleNeg1'] + '</td><td>' + general['eleNeg2'] + '</td></tr></tbody></table>');
                                    $('#compareResults').append('<span class="highlight"><h2>Splits</h2><table><thead><th>Point(km)</th><th>' + decodeURIComponent(general['name1']) + ' ' + general['date1'] + '</th><th>' + decodeURIComponent(general['name2']) + ' ' + general['date2'] + '</th><th>Segment diff</th><th>Total diff</th></thead><tbody>' + tt + '</tbody></table></span>');
                                },
                                400: function(xhr) {
                                    alert('Activities may be removed :(');
                                }
                            }
                        });
                    },
                    "Close": function() {
                        $(this).dialog("close");
                    }
                },
                width: Math.min(800, $(window).width() * 0.8),
                height: Math.min(800, $(window).height() * 0.8),
                create: function(event) {
                    $(event.target).parent().css({
                        'position': 'fixed',
                        "left": 50,
                        "top": 150
                    });
                }
            });
			$("#bestSplits").dialog({
                autoOpen: false,
                modal: true,
                show: "blind",
                hide: "blind",
                buttons: {
                    "Close": function() {
                        $(this).dialog("close");
                    }
                },
                width: Math.min($(window).width() * 0.7, 700),
                height: Math.min($(window).height() * 0.85, 800),
                create: function(event) {
                    $(event.target).parent().css({
                        'position': 'fixed',
                        "left": 50,
                        "top": 150
                    });
                }
            });
			$("#mTotals").dialog({
                autoOpen: false,
                modal: true,
                show: "blind",
                hide: "blind",
                buttons: {
                    "Close": function() {
                        $(this).dialog("close");
                    }
                },
                width: Math.min(400),
                height: Math.min($(window).height() * 0.85, 900),
                create: function(event) {
                    $(event.target).parent().css({
                        'position': 'fixed',
                        "left": 50,
                        "top": 150
                    });
                }
            });
        }

        function initContent(data) {
            itemsDS = [];
            $('#dataHolder').html('');
            all = data['activities'];
            if (all.length == 0) {
                $('#ht').text('No activities found');
                $('#runs tbody').html('');
                $('#runs').trigger('update');
                $('#runs').tablesorter();
                $('#runs').hide();
                $('#overall').hide();
                return false;
            }
            $('#overall').show(); 
            $('#runs').show();
            $('#ht').text(all.length + ' matching ' + (all.length != 1 ? 'activities' : 'activity'));
            $('#overall tbody').html('<tr><td>Total distance</td><td>' + data['totalDistance'] + " km</td><tr><td>Total time</td><td>" + data['totalTime'] + '</td><tr><td>Average speed</td><td>' + data['avgSpeed'] + ' km/h</td></tr>' +
                '<tr><td>Est. elevation gain</td><td>' + data['elePos'] + ' m</td></tr><tr><td>Est. elevation loss</td><td>' + data['eleNeg'] + ' m</td></tr><tr><td>Est. running distance(>9km/h)</td><td>' + data['totalRunDist'] + ' km</td></tr>');
            initMonthlyTotals(data['mtotals']);
			runsHtml = '';
            optsAll = '';
            var dialog = {
                autoOpen: false,
                modal: false,
                show: "blind",
                hide: "blind",
                buttons: {
                    "Close": function() {
                        $(this).dialog("close");
                    }
                },
                width: Math.min($(window).width() * 0.7, 600),
                height: Math.min($(window).height() * 0.85, 800),
                create: function(event) {
                    $(event.target).parent().css({
                        'position': 'fixed',
                        "left": 50,
                        "top": 150
                    });
                }
            };
            $.each(all, function(i, item) {
                runsHtml += '<tr><td>' + (i + 1) + '</td><td><div id="date' + i + '">' + item['date'] + '</div></td><td><div class="runitem" id="item' + i + '">' + decodeURIComponent(item['name']) + '</div></td><td><div id="type' + i + '">' + item['type'] + '</div></td><td>' +
                    item['dist'] + '</td><td>' + item['timeTotal'] + '</td><td>' + item['avgPace'] + '</td><td>' + item['avgSpeed'] + '</td>' +
                    '<td>' + formatEle(item['eleTotalPos'], item['eleTotalNeg']) + '</td>' +
                    '<td><div id="edit' + i + '" class="ui-icon ui-icon-pencil ui-state-hover runitem"></div>' +
                    '<div id="compare' + i + '" class="ui-icon ui-icon-arrowthick-2-e-w ui-state-hover runitem"></div>' +
					'<div id="trash' + i + '" class="ui-icon ui-icon-trash ui-state-hover runitem"></div></td></tr>';
                $('#dataHolder').append('<div style="display: none;" id="data' + i + '"></div>');
				$('#dataHolder').append('<div style="display: none;" id="ui' + i + '"></div>');
                distr = item['speedDist'];
                tableHtml = '<span class="highlight"><table><thead><th>Range</th><th>Time</th><th>Distance</th><th>Gain</th><th>Loss</th></thead><tbody>';
                $.each(distr, function(i, diap) {
                    tableHtml += '<tr><td><strong>' + diap['range'] + ' km/h</strong></td><td>' + diap['time'] + '</td><td>' + diap['dist'] + '</td><td><span class="green">' + diap['elePos'] + '</span></td><td><span class="red">' + diap['eleNeg'] + '</span></td></tr>';
                });
                tableHtml += '</tbody></table></span>';
                splits = item['splits'];
                splitHtml = '<span class="highlight"><table><thead><th>Point(km)</th><th>Pace</th><th>Avg speed</th><th>Diff</th><th>Total time</th><th>Acc speed</th></thead><tbody>';
                $.each(splits, function(i, sp) {
                    splitHtml += '<tr><td><strong>' + round(sp['total']) + '</strong></td><td>' + sp['pace'] + '</td><td>' + sp['speed'] + '</td><td>' + formatEleDiff(sp['ele']) + '</td><td>' + sp['timeTotal'] +
					'</td><td>' + sp['accumSpeed'] + '</td></tr>';
                });
                splitHtml += '</tbody></table></span>';
                filename = item['genby'].endsWith('.gpx') ? item['genby'].substring(0, item['genby'].length - 4) : item['genby'];
                linkHtml = '</ul><a href="' + filename + '" target="_blank"><h3>External link</h3></a><ul>';
                if (item['garminLink'] != 'none') {
                    linkHtml += '</ul><a href="' + item['garminLink'] + '" target="_blank"><h3>Garmin Connect</h3></a><ul>';
                }
                itemsDS.push(function() {
                    $('#ui' + i).dialog(dialog);
                    $('#ui' + i).html($('#data' + i).html());
                    $('#ui' + i).dialog('option', 'title', 'Details ' + $('#item' + i).text());
                    $('#ui' + i).dialog('open');
                });
                $('#data' + i).append('<ul><li><h3>General</h3></li><table class="highlightOnly"><tbody><tr><td>Date</td><td>' + item['date'] + '</td></tr><tr><td>Distance(km)</td><td>' + item['dist'] + '</td></tr><tr><td>Total time</td><td>' + item['timeTotal'] + '</td></tr><tr><td>Elevation gain(m)</td><td>' +
                    '<span class="green">' + item['eleTotalPos'] + '</span></td></tr><tr><td>Elevation loss(m)</td><td>' + '<span class="red">' + item['eleTotalNeg'] + '</span></td></tr><tr><td>' +
                    'Running time(>9km/h)</td><td>' + item['timeRunning'] + '</td></tr><tr><td>Running distance(km)</td><td>' + item['distRunning'] + '</td></tr><tr><td>Running elevation gain(m)</td><td>' + '<span class="green">' + item['eleRunningPos'] + '</span></td></tr><tr><td>Running elevation loss(m)</td><td>' +
                    '<span class="red">' + item['eleRunningNeg'] + '</span></td></tr><tr><td>Rest time</td><td>' + item['timeRest'] + '</td></tr><tr><td>Average speed(km/h)</td><td>' + item['avgSpeed'] + '</td></tr><tr><td>Average pace(min/km)</td><td>' + item['avgPace'] + '</td></tr></tbody></table>' + linkHtml + '<li><h3>Speed distribution</h3>' +
                    '</li>' + tableHtml + '</li><li><h3>Splits</h3></li>' + splitHtml + '</ul>');
            });
            $('#runs tbody').html(runsHtml);
            $('#runs').trigger('update');
            $('#runs').trigger("sorton", [ [[1, 'dates']] ]);
			var table = document.getElementById('runs');
			var rowLength = table.rows.length;
			for(var i=1; i<rowLength; i++) {
				table.rows[i].cells[0].innerHTML=(i).toString();
			}
            $.each(all, function(i, item) {
                optsAll += '<option genby="' + item['genby'] + '" value="#' + (i + 1) + ' ' + $('#item' + i).text() + '">' + $('#item' + i).text() + ' ' + $('#date' + i).text() + '</option>';
            });
            $.each(all, function(i, item) {
                $('#compare' + i).click(function() {
                    $('#comparable').html('Compare with <select id="selectComp">' + optsAll + '</select><div id="compareResults" />');
                    $('#comparable').dialog('option', 'title', 'Compare ' + $('#item' + i).text() + ' ' + $('#date' + i).text());
                    $('#comparable').attr('file1', item['genby']);
                    $('#comparable').dialog('open');
                });
                $('#edit' + i).click(function() {
                    type = $('#type' + i).text();
                    $("#editable").html('<table><tbody><tr><td>Name </td><td><input type="text" id="chooseName" value="' + $('#item' + i).text() + '"/></td></tr><tr><td>Type </td><td><select id="chooseType">' + getOption("Running", type) +
						getOption("Trail", type) + getOption("Uphill", type) + getOption('Hiking', type) + getOption('Walking', type) + getOption('Other', type) +
						'</select></td></tr></tbody></table>');
                    $("#editable").dialog('option', 'title', 'Edit ' + $('#item' + i).text() + ' ' + $('#date' + i).text());
                    $("#editable").attr('genby', item['genby']);
                    $("#editable").attr('refname', 'item' + i);
                    $("#editable").attr('reftype', 'type' + i);
                    $("#editable").dialog('open');
                });
				$('#trash' + i).click(function() {
					$("#removable").html('Remove this activity?');
                    $("#removable").dialog('option', 'title', 'Remove ' + $('#item' + i).text() + ' ' + $('#date' + i).text());
                    $("#removable").attr('genby', item['genby']);
                    $("#removable").dialog('open');
				});
            });
            for (i = 0; i < itemsDS.length; ++i) {
                $('#runs tr:eq(' + (i + 1) + ') td:not(:last-child)').click(itemsDS[i]);
            }
            $('#rescanButton').click(function() {
				$.ajax({
					url: 'rescanActivities',
					method: 'POST',
					dataType: 'json',
					statusCode: {
						200: function(data) {
							getBest();
							fetch();
							$('#rsOk').html('Rescan completed!');
							$('#rsOk').dialog('option', 'title', 'Action finished');
							$('#rsOk').dialog('open');
						}
					}
				});  
            });
        }

        function disableSearch() {
            $("#search").button("option", "disabled", true);
        }

        var fetchEnabled = true;

        function fetch() {
            if (!fetchEnabled) {
                return false;
            }
            var period = $('input[name=selectPeriod]:checked').attr('id');
            var records = parseInt($('input[name=selectLast]:checked').attr('cap'));
            var ds = $('#dtStart').datepicker('getDate');
            var de = $('#dtEnd').datepicker('getDate');
			var nf = encodeURIComponent($("#searchName").val());
            $.ajax({
                url: 'fetch',
                method: 'POST',
                dataType: 'json',
                headers: {
                    'Content-Type': 'application/json',
                    'run': $("#checkbox-1").prop('checked'),
                    'trail': $("#checkbox-2").prop('checked'),
					'uphill': $("#checkbox-3").prop('checked'),
                    'hike': $("#checkbox-4").prop('checked'),
                    'walk': $("#checkbox-5").prop('checked'),
                    'other': $("#checkbox-6").prop('checked'),
                    'dateOpt': parseInt(period[period.length - 1]) - 1,
                    'dtStart': ds ? (ds.getMonth() + 1) + '/' + ds.getDate() + '/' + ds.getFullYear() : '',
                    'dtEnd': de ? (de.getMonth() + 1) + '/' + de.getDate() + '/' + de.getFullYear() : '',
                    'records': records,
					'nameFilter': nf,
					'dmin': $('#spinnerMin').val(),
					'dmax': $('#spinnerMax').val()
                },
                statusCode: {
                    200: function(data) {
                        initContent(data);
                    },
					400: function(data) {
                        alert('Invalid distance arguments');
                    }
                }
            });
        }

        function disableAndFetch() {
            disableSearch();
            $('#dtStart').datepicker('disable');
            $('#dtEnd').datepicker('disable');
            fetch();
        }
		
		function getStat(data, opt) {
			if (data[opt]) {
				return data[opt];
			}
			return opt == 'ach' ? 'Locked' : '---';
		}
		
		function getBest() {
			initSplitsBest();
			$.ajax({
                url: 'best',
                method: 'POST',
                dataType: 'json',
                headers: {
                    'Content-Type': 'application/json'
                },
                statusCode: {
                    200: function(data) {
						var farthest = data['longest'];
						var fastest = data['fastest'];
						var maxAsc = data['maxAsc'];
						var k1 = data['1K'];
						var k25 = data['2K5'];
						var k5 = data['5K'];
						var k10 = data['10K'];
						var semi = data['21K'];
						var k30 = data['30K'];
						var marathon = data['42K'];
						$('#bestOf tbody').html('<tr><td>Farthest</td><td>' + getStat(farthest, 'ach') + '</td><td>' + getStat(farthest, 'when') + '</td></tr>' +
						'<tr><td>Fastest</td><td>' + getStat(fastest, 'ach') + '</td><td>' + getStat(fastest, 'when') + '</td></tr>' +
						'<tr><td>Max ascent</td><td>' + getStat(maxAsc, 'ach') + '</td><td>' + getStat(maxAsc, 'when') + '</td></tr>' +
						'<tr><td>1K</td><td>' + getStat(k1, 'ach') + '</td><td>' + getStat(k1, 'when') + '</td></tr>' +
						'<tr><td>2.5K</td><td>' + getStat(k25, 'ach') + '</td><td>' + getStat(k25, 'when') + '</td></tr>' +
						'<tr><td>5K</td><td>' + getStat(k5, 'ach') + '</td><td>' + getStat(k5, 'when') + '</td></tr>' +
						'<tr><td>10K</td><td>' + getStat(k10, 'ach') + '</td><td>' + getStat(k10, 'when') + '</td></tr>' +
						'<tr><td>Half-marathon</td><td>' + getStat(semi, 'ach') + '</td><td>' + getStat(semi, 'when') + '</td></tr>' +
						'<tr><td>30K</td><td>' + getStat(k30, 'ach') + '</td><td>' + getStat(k30, 'when') + '</td></tr>' +
						'<tr><td>Marathon</td><td>' + getStat(marathon, 'ach') + '</td><td>' + getStat(marathon, 'when') + '</td></tr>');
                    }
                }
            });
		}
		
		function initSplitsBest() {
			$.ajax({
                url: 'bestSplits',
                method: 'POST',
                dataType: 'json',
                headers: {
                    'Content-Type': 'application/json'
                },
                statusCode: {
                    200: function(data) {
						$("#bestSplits").dialog('option', 'title', 'Best split times');
						totals = data['totals'];
						splits = '';
						$.each(totals, function(i, item) {
							splits += '<tr><td><strong>' + item['point'] + '</strong></td><td>' + item['ach'] + '</td><td>' + decodeURIComponent(item['name']) + '</td><td>' + item['date'] + '</td></tr>';
						});
						$("#bestSplits").html('<h2>Best split times by distance</h2><span class="highlight"><table><thead><tr><th>Distance</th><th>Best time</th><th>Name</th><th>Date</th></tr></thead><tbody>' + splits + '</tbody></table></span>');
                    }
                }
            });
		}
		
		function getMTable(item) {
			return '<table class="innermtt"><tbody><tr><td>Running&nbsp;</td><td>' + item['r'] + '</td></tr><tr><td>Trail&nbsp;</td><td>' + item['t'] + '</td></tr>'
				+ '<tr><td>Uphill&nbsp;</td><td>' + item['u'] + '</td></tr><tr><td>Hiking&nbsp;</td><td>' + item['h']
				+ '</td></tr><tr><td><strong>Run&Trail&nbsp;</strong></td><td><strong>' + item['rt'] + '</strong></td></tr></tbody></table>';
		}
		
		function initMonthlyTotals(data) {
			$("#mTotals").dialog('option', 'title', 'Monthly total distances');
			tableHtml = '<table id="mtt" align="center"><tbody>';
			$.each(data, function(i, item) {
				tableHtml += '<tr class="border_bottom"><td>' + item['name'] + '</td><td>' + getMTable(item) + '</td></tr>';
			});
			tableHtml += '</tbody></table>';
			$("#mTotals").html('<h2>Total distance by month</h2><p>' + tableHtml);
		}
		
		function checkCookieVal(cookieVal) {
			if (cookieVal == '') {
				$("#loginButton").button("option", "disabled", true);
			} else {
				$.ajax({
                    url: 'checkCookie',
                    method: 'POST',
                    dataType: 'json',
                    statusCode: {
                        200: function(xhr) {
                            $("#loginButton").button("option", "disabled", true);
							$("#loginButton").button("option", "label", "Authorized");
                        },
                        401: function(xhr) {
                            $("#loginButton").button("option", "disabled", false);
                        }
                    }
				});
			}
		}

        $(document).ready(function() {
			var ind = document.cookie.indexOf("xruncalc=");
			var cookieVal = '';
			if (ind != -1) {
				cookieVal=document.cookie.substring(ind + 9);
			}
			checkCookieVal();
            $("#selectAll").button();
            $("#search").button();
			$("#dsearch").button();
			$("#findNames").button();
			$("#bestTotalsBtn").button();
			$("#mTotalsBtn").button();
            $("#search").button("option", "disabled", true);
            $("input[name=selectPeriod]").checkboxradio();
            $("input[name=selectLast]").checkboxradio();
            $("#checkbox-1").checkboxradio();
            $("#checkbox-2").checkboxradio();
            $("#checkbox-3").checkboxradio();
            $("#checkbox-4").checkboxradio();
            $("#checkbox-5").checkboxradio();
			$("#checkbox-6").checkboxradio();
			$("#findNames").click(function() {
				fetch();
			});
            $("#selectAll").click(function() {
                fetchEnabled = false;
                $("#checkbox-1").prop('checked', true).change();
                $("#checkbox-2").prop('checked', true).change();
                $("#checkbox-3").prop('checked', true).change();
                $("#checkbox-4").prop('checked', true).change();
                $("#checkbox-5").prop('checked', true).change();
				$("#checkbox-6").prop('checked', true).change();
                fetchEnabled = true;
                fetch();
            });
            $("#search").click(function() {
                fetch();
            });
			$("#dsearch").click(function() {
                fetch();
            });
			$("#bestTotalsBtn").click(function() {
				$("#bestSplits").dialog('open');
            });
			$("#mTotalsBtn").click(function() {
				$("#mTotals").dialog('open');
            });
            $("#radio-1").change(disableAndFetch);
            $("#radio-2").change(disableAndFetch);
            $("#radio-3").change(disableAndFetch);
            $("#radio-4").change(disableAndFetch);
            $("#radio-5").change(disableAndFetch);
            $("#radio-6").change(disableAndFetch);
            $("#radio-7").change(function() {
                if (this.checked) {
                    $('#search').button("option", "disabled", false);
                    $('#dtStart').datepicker('enable');
                    $('#dtEnd').datepicker('enable');
                }
            });
            $("input[name=selectLast]").change(fetch);
            $("#checkbox-1").change(fetch);
            $("#checkbox-2").change(fetch);
            $("#checkbox-3").change(fetch);
            $("#checkbox-4").change(fetch);
            $("#checkbox-5").change(fetch);
			$("#checkbox-6").change(fetch);
			$("#loginButton").button();
            initDialogs();
			$("#loginButton").click(function() {
                $('#login').html('<table><tbody><tr><td>User </td><td><input type="text" id="loginUser" value="BatGeorgi"/></td></tr>' +
				'<tr><td>Password </td><td><input type="password" id="loginPassword"/></td></tr></tbody></table>');
                $('#login').dialog('option', 'title', 'Login');
                $('#login').dialog('open');
            });
            $('#dtStart').datepicker({
                yearRange: '2013:c',
                changeYear: true
            });
            $('#dtEnd').datepicker({
                yearRange: '2013:c',
                changeYear: true
            });
            $('#dtStart').datepicker('disable');
            $('#dtEnd').datepicker('disable');
            fetch();
            $.tablesorter.addWidget({
                id: "numbering",
                format: function(table) {
                    var c = table.config;
                    $("tr:visible", table.tBodies[0]).each(function(i) {
                        $(this).find('td').eq(0).text(i + 1);
                    });
                }
            });
			$("#spinnerMin").spinner();
			$("#spinnerMax").spinner();
			$("#spinnerMin").spinner({min: 0});
			$("#spinnerMax").spinner({min: 0});
			getBest();
            var months = {
                'Jan': 0,
                'Feb': 1,
                'Mar': 2,
                'Apr': 3,
                'May': 4,
                'Jun': 5,
                'Jul': 6,
                'Aug': 7,
                'Sep': 8,
                'Oct': 9,
                'Nov': 10,
                'Dec': 11
            };
            $.tablesorter.addParser({
                id: 'dates',
                is: function(s) {
                    return false;
                },
                format: function(s) {
                    return parseInt(s.substring(7, 11)) * 400 + months[s.substring(3, 6)] * 32 + parseInt(s.substring(0, 2));
                },
                type: 'numeric'
            });
            $.tablesorter.addParser({
                id: 'paces',
                is: function(s) {
                    return false;
                },
                format: function(s) {
                    return parseInt(s.substring(0, s.indexOf(':'))) * 70 + parseInt(s.substring(s.indexOf(':') + 1, s.length));
                },
                type: 'numeric'
            });
            $('#runs').tablesorter({
                headers: {
                    0: {
                        sorter: false
                    },
                    1: {
                        sorter: 'dates'
                    },
                    3: {
                        sorter: false
                    },
                    6: {
                        sorter: 'paces'
                    },
                    8: {
                        sorter: false
                    },
                    9: {
                        sorter: false
                    }
                },
                widgets: ['numbering']
            });
        });
    </script>
</head>

<body>
    <div id="heading">
        <H1><strong>Run Analyzer 1.9</strong></H1>
    </div>
	<a href="upload"><input id="importButton" type="image" src="button-dark-plus-icon.png" width="40" height="40" /></a>
    <input id="rescanButton" type="image" src="button_blue_rescan.png" width="40" height="40" />
	<button id="loginButton">Login</button>
    <div id="filters">
        <fieldset>
            <legend class="legend-cap">Activity Type</legend>
            <label for="checkbox-1">Running</label>
            <input type="checkbox" name="checkbox-1" id="checkbox-1" checked/>
            <label for="checkbox-2">Trail</label>
            <input type="checkbox" name="checkbox-2" id="checkbox-2" checked/>
			<label for="checkbox-3">Uphill</label>
            <input type="checkbox" name="checkbox-3" id="checkbox-3" checked/>
            <label for="checkbox-4">Hiking</label>
            <input type="checkbox" name="checkbox-4" id="checkbox-4" checked/>
            <label for="checkbox-5">Walking</label>
            <input type="checkbox" name="checkbox-5" id="checkbox-5"/>
            <label for="checkbox-6">Other</label>
            <input type="checkbox" name="checkbox-6" id="checkbox-6"/>
            <button id="selectAll">Select All</button>
        </fieldset>
        <p>
		<fieldset>
            <legend class="legend-cap">Activity name</legend>
			<input type="text" name="searchName" id="searchName"/>
			<button id="findNames">Search</button>
		</fieldset>
		<p>
            <fieldset>
                <legend class="legend-cap">Period</legend>
                <label for="radio-1">This month</label>
                <input type="radio" name="selectPeriod" id="radio-1">
                <label for="radio-2">This year</label>
                <input type="radio" name="selectPeriod" id="radio-2" checked>
                <label for="radio-3">Last 30 days</label>
                <input type="radio" name="selectPeriod" id="radio-3">
                <label for="radio-4">Last 3 months</label>
                <input type="radio" name="selectPeriod" id="radio-4">
                <label for="radio-5">Last 365 days</label>
                <input type="radio" name="selectPeriod" id="radio-5">
                <label for="radio-6">From begining</label>
                <input type="radio" name="selectPeriod" id="radio-6">
                <label for="radio-7">Custom</label>
                <input type="radio" name="selectPeriod" id="radio-7">
            </fieldset>
            <p>
            <div id="customDates">
                <p>Start date: <input type="text" id="dtStart" />
                <p>End date: <input type="text" id="dtEnd" />
            </div>
            <button id="search">Search</button>
			<p>
            <fieldset>
                <legend class="legend-cap">Distance</legend>
				<label for="spinnerMin">Min km</label>
				<input id="spinnerMin" name="dmin"/>
				<label for="spinnerMax">Max km</label>
				<input id="spinnerMax" name="dmax"/>
				<button id="dsearch">Search</button>
			 </fieldset>
            <p>
            <fieldset>
                <legend class="legend-cap">Most recent activities</legend>
                <label for="l-10">Last 10</label>
                <input type="radio" name="selectLast" id="l-10" cap="10">
                <label for="l-20">Last 20</label>
                <input type="radio" name="selectLast" id="l-20" cap="20">
                <label for="l-50">Last 50</label>
                <input type="radio" name="selectLast" id="l-50" cap="50">
                <label for="l-100">Last 100</label>
                <input type="radio" name="selectLast" id="l-100" cap="100">
                <label for="l-inf">All</label>
                <input type="radio" name="selectLast" id="l-inf" cap="1234567" checked>
            </fieldset>
    </div>
    <div id="activities">
		<div id="overallWrap">
			<button id="mTotalsBtn">View monthly totals</button>
			<h2>Totals</h2>
			<table id="overall">
				<tbody></tbody>
			</table>
		</div>
		<div id="bestOfWrap">
			<button id="bestTotalsBtn">View best split times</button>
			<h2>Best</h2>
			<table id="bestOf">
				<tbody></tbody>
			</table>
		</div>
        <h2>
            <div id="ht">Activities</div>
        </h2>
        <table class="tablesorter highlight" id="runs" cellspacing="0" summary="Running and hiking activities">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Date</th>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Distance&nbsp;&nbsp;</th>
                    <th>Time</th>
                    <th>Pace&nbsp;&nbsp;</th>
                    <th>Speed&nbsp;&nbsp;</th>
                    <th>Elevation est.</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody />
        </table>
    </div>
    <div id="editable"></div>
	<div id="removable"></div>
    <div id="details"></div>
	<div id="bestSplits"></div>
	<div id="mTotals"></div>
    <div id="dataHolder" />
    <div id="comparable">
        <div id="compareResults" />
    </div>
	<div id="rsOk"></div>
	<div id="login" />
</body>

</html>